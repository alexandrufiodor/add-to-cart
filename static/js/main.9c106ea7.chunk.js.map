{"version":3,"sources":["components/Header/Nav.module.css","state/actions/productActions.ts","api/api.ts","state/actions/cartActions.ts","components/Products/Products.tsx","components/Header/Nav.tsx","components/Cart/Cart.tsx","components/Header/Header.tsx","App.tsx","state/reducers/productReducer.ts","state/reducers/cartReducer.ts","state/store.ts","index.tsx","components/Products/Products.module.css","components/Cart/Cart.module.css"],"names":["module","exports","PRODUCT_ACTIONS_TYPE","productsAPI","fetch","then","response","sortByCategoryAC","products","sortKey","type","SORT_BY_CATEGORY","payload","sortByPriceAC","SORT_BY_PRICE","fetchProducts","dispatch","FETCH_PRODUCTS_BEGIN","handleErrors","res","json","FETCH_PRODUCTS_SUCCESS","catch","error","FETCH_PRODUCTS_FAILURE","fetchProductsFailureAC","ok","Error","statusText","CART_ACTIONS_TYPE","Products","useState","stateCategory","setStateCategory","statePrice","setStatePrice","getProducts","useSelector","state","fetch_products","useDispatch","useEffect","addToCartClick","useCallback","product","productId","ADD_TO_CART","quantity","addToCartAC","sortByCategoryAscClick","items","sortByCategoryDescClick","sortByPriceAscClick","sortByPriceDescClick","className","s","table","tableCell","onClick","map","key","id","category","name","price","Nav","nav","navItem","activeClassName","active","to","Cart","cart","updateCart","UPDATE_CART_QUANTITY","updateCartQuantityAC","removeFromCartClick","REMOVE_FROM_CART","removeFromCartAC","p","toFixed","Header","render","path","App","initialState","loading","rootReducer","combineReducers","action","sort","a","b","nameA","toUpperCase","nameB","item","find","push","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9c106ea7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__20OOG\",\"navItem\":\"Nav_navItem__28r94\",\"active\":\"Nav_active__3zEoj\"};","import { productsAPI, ProductType } from '../../api/api';\nimport { Dispatch } from 'redux';\n\nexport enum PRODUCT_ACTIONS_TYPE {\n  FETCH_PRODUCTS_BEGIN = 'FETCH-PRODUCTS-BEGIN',\n  FETCH_PRODUCTS_SUCCESS = 'FETCH-PRODUCTS-SUCCESS',\n  FETCH_PRODUCTS_FAILURE = 'FETCH-PRODUCTS-FAILURE',\n  SORT_BY_CATEGORY = 'ORDER-BY-CATEGORY-ASC',\n  SORT_BY_PRICE = 'SORT-BY-PRICE',\n}\n\nexport type fetchProductsBeginType = {\n  type: PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_BEGIN;\n};\n\nexport const fetchProductsBeginAC = (): fetchProductsBeginType => {\n  return { type: PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_BEGIN };\n};\n\nexport type fetchProductsSuccessType = {\n  type: PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_SUCCESS;\n  payload: { products: Array<ProductType> };\n};\n\nexport const fetchProductsSuccessAC = (products: Array<ProductType>): fetchProductsSuccessType => {\n  return {\n    type: PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_SUCCESS,\n    payload: { products: products },\n  };\n};\n\nexport type fetchProductsFailureType = {\n  type: PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_FAILURE;\n  payload: { error: string };\n};\n\nexport const fetchProductsFailureAC = (error: string): fetchProductsFailureType => {\n  return {\n    type: PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_FAILURE,\n    payload: { error },\n  };\n};\n\nexport type sortByCategoryType = {\n  type: PRODUCT_ACTIONS_TYPE.SORT_BY_CATEGORY;\n  payload: { products: Array<ProductType>; sortKey: string };\n};\n\nexport const sortByCategoryAC = (products: Array<ProductType>, sortKey: string): sortByCategoryType => {\n  return {\n    type: PRODUCT_ACTIONS_TYPE.SORT_BY_CATEGORY,\n    payload: { products: products, sortKey: sortKey },\n  };\n};\n\nexport type sortByPriceType = {\n  type: PRODUCT_ACTIONS_TYPE.SORT_BY_PRICE;\n  payload: { products: Array<ProductType>; sortKey: string };\n};\n\nexport const sortByPriceAC = (products: Array<ProductType>, sortKey: string): sortByPriceType => {\n  return {\n    type: PRODUCT_ACTIONS_TYPE.SORT_BY_PRICE,\n    payload: { products: products, sortKey: sortKey },\n  };\n};\n\nexport function fetchProducts() {\n  return (dispatch: ThunkDispatch) => {\n    dispatch(fetchProductsBeginAC());\n    return productsAPI\n      .geProducts()\n      .then(handleErrors)\n      .then((res) => res.json())\n      .then((json) => {\n        dispatch(fetchProductsSuccessAC(json));\n        return json;\n      })\n      .catch((error) => dispatch(fetchProductsFailureAC(error)));\n  };\n}\n\nfunction handleErrors(response: any) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response;\n}\n\nexport type FetchActionsType =\n  | fetchProductsBeginType\n  | fetchProductsSuccessType\n  | fetchProductsFailureType\n  | sortByCategoryType\n  | sortByPriceType;\n\ntype ThunkDispatch = Dispatch<FetchActionsType>;\n","export interface ProductType {\n  id: number;\n  name: string;\n  category: Category;\n  price: number;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n}\n\nexport const productsAPI = {\n  geProducts() {\n    return fetch('http://localhost:3001/api/products/').then((response) => response);\n  },\n};\n","import { ProductType } from '../../api/api';\n\nexport enum CART_ACTIONS_TYPE {\n  ADD_TO_CART = 'ADD-TO-CART',\n  REMOVE_FROM_CART = 'REMOVE-FROM-CART',\n  UPDATE_CART_QUANTITY = 'UPDATE-CART-QUANTITY',\n}\n\nexport type addToCartType = {\n  type: CART_ACTIONS_TYPE.ADD_TO_CART;\n  payload: {\n    product: ProductType;\n    productId: number;\n    quantity: number;\n  };\n};\n\nexport const addToCartAC = (product: ProductType, productId: number): addToCartType => {\n  return {\n    type: CART_ACTIONS_TYPE.ADD_TO_CART,\n    payload: {\n      product,\n      productId: productId,\n      quantity: 1,\n    },\n  };\n};\n\nexport type removeFromCartType = {\n  type: CART_ACTIONS_TYPE.REMOVE_FROM_CART;\n  payload: {\n    productId: number;\n    quantity: number;\n  };\n};\n\nexport const removeFromCartAC = (productId: number, quantity: number): removeFromCartType => {\n  return {\n    type: CART_ACTIONS_TYPE.REMOVE_FROM_CART,\n    payload: {\n      productId: productId,\n      quantity: quantity,\n    },\n  };\n};\n\nexport type updateCartQuantityType = {\n  type: CART_ACTIONS_TYPE.UPDATE_CART_QUANTITY;\n  payload: {\n    productId: number;\n    quantity: number;\n  };\n};\n\nexport const updateCartQuantityAC = (productId: number, quantity: number): updateCartQuantityType => {\n  return {\n    type: CART_ACTIONS_TYPE.UPDATE_CART_QUANTITY,\n    payload: {\n      productId,\n      quantity: quantity,\n    },\n  };\n};\n\nexport type CartActionsType = addToCartType | removeFromCartType | updateCartQuantityType;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { fetchProducts, sortByCategoryAC, sortByPriceAC } from '../../state/actions/productActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from '../../state/store';\nimport { FetchProductsStateType } from '../../state/reducers/productReducer';\nimport s from './Products.module.css';\nimport { CartStateType } from '../../state/reducers/cartReducer';\nimport { addToCartAC } from 'state/actions/cartActions';\n\nexport const Products = () => {\n  const [stateCategory, setStateCategory] = useState(true);\n  const [statePrice, setStatePrice] = useState(true);\n  const getProducts = useSelector<AppRootStateType, FetchProductsStateType>((state) => state.fetch_products);\n  // const cart = useSelector<AppRootStateType, CartStateType>(state => state.cart);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchProducts());\n  }, []);\n\n  const addToCartClick = useCallback(function (product, productId) {\n    dispatch(addToCartAC(product, productId));\n  }, []);\n\n  const sortByCategoryAscClick = useCallback(\n    function () {\n      dispatch(sortByCategoryAC(getProducts.items, 'asc'));\n      setStateCategory(false);\n    },\n    [getProducts.items],\n  );\n\n  const sortByCategoryDescClick = useCallback(\n    function () {\n      dispatch(sortByCategoryAC(getProducts.items, 'desc'));\n      setStateCategory(true);\n    },\n    [getProducts.items],\n  );\n\n  const sortByPriceAscClick = useCallback(\n    function () {\n      dispatch(sortByPriceAC(getProducts.items, 'asc'));\n      setStatePrice(false);\n    },\n    [getProducts.items],\n  );\n\n  const sortByPriceDescClick = useCallback(\n    function () {\n      dispatch(sortByPriceAC(getProducts.items, 'desc'));\n      setStatePrice(true);\n    },\n    [getProducts.items],\n  );\n\n  return (\n    <div>\n      <table className={s.table}>\n        <thead>\n          <tr>\n            {stateCategory ? (\n              <th className={s.tableCell} onClick={() => sortByCategoryAscClick()}>\n                Category ↑\n              </th>\n            ) : (\n              <th className={s.tableCell} onClick={() => sortByCategoryDescClick()}>\n                Category ↓\n              </th>\n            )}\n\n            <th className={s.tableCell}>Name</th>\n            {statePrice ? (\n              <th className={s.tableCell} onClick={() => sortByPriceAscClick()}>\n                Price ↑\n              </th>\n            ) : (\n              <th className={s.tableCell} onClick={() => sortByPriceDescClick()}>\n                Price ↓\n              </th>\n            )}\n            <th className={s.tableCell}>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {getProducts.items.map((product) => (\n            <tr key={product.id}>\n              <td className={s.tableCell} key={product.category.id}>\n                {product.category.name}\n              </td>\n              <td className={s.tableCell}>{product.name}</td>\n              <td className={s.tableCell}>${product.price}</td>\n              <td className={s.tableCell}>\n                <button\n                  onClick={() => {\n                    addToCartClick(product, product.id);\n                  }}\n                >\n                  Add to Cart\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Nav.module.css';\n\nexport const Nav = () => {\n  return (\n    <nav className={s.nav}>\n      <div className={s.navItem}>\n        <NavLink activeClassName={s.active} to=\"/products\">\n          All Products\n        </NavLink>\n      </div>\n      <div className={s.navItem}>\n        <NavLink activeClassName={s.active} to=\"/cart/\">\n          Cart\n        </NavLink>\n      </div>\n    </nav>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from '../../state/store';\nimport s from './Cart.module.css';\nimport { CartStateType } from '../../state/reducers/cartReducer';\nimport { removeFromCartAC, updateCartQuantityAC } from 'state/actions/cartActions';\n\nexport const Cart = () => {\n  const cart = useSelector<AppRootStateType, CartStateType>((state) => state.cart);\n\n  const dispatch = useDispatch();\n\n  const updateCart = useCallback(\n    function (productId, quantity) {\n      dispatch(updateCartQuantityAC(productId, quantity));\n    },\n    [dispatch],\n  );\n\n  const removeFromCartClick = useCallback(function (id, quantity) {\n    dispatch(removeFromCartAC(id, quantity));\n  }, []);\n\n  return (\n    <div>\n      <table className={s.table}>\n        <thead>\n          <tr>\n            <th className={s.tableCell}>Category</th>\n\n            <th className={s.tableCell}>Name</th>\n\n            <th className={s.tableCell}>Price</th>\n            <th className={s.tableCell}>Quantity</th>\n            <th className={s.tableCell}>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {cart.cart.map((p) => (\n            <tr key={p.product.id}>\n              <td className={s.tableCell} key={p.product.category.id}>\n                {p.product.category.name}\n              </td>\n              <td className={s.tableCell}>{p.product.name}</td>\n              <td className={s.tableCell}>${(p.product.price * p.quantity).toFixed(2)}</td>\n              <td className={s.tableCell}>{p.quantity}</td>\n              <td className={s.tableCell}>\n                <button\n                  onClick={() => {\n                    removeFromCartClick(p.product.id, p.quantity);\n                  }}\n                >\n                  -\n                </button>\n                Remove{' '}\n                <button\n                  onClick={() => {\n                    updateCart(p.product.id, p.quantity);\n                  }}\n                >\n                  +\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Products } from '../Products/Products';\nimport { Nav } from './Nav';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Cart } from '../Cart/Cart';\n\nexport const Header = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <Nav />\n        <div>\n          <Route render={() => <Products />} path=\"/products\" />\n          <Route render={() => <Cart />} path=\"/cart/\" />\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n};\n","import React from 'react';\nimport { Header } from './components/Header/Header';\n\nconst App = () => {\n  return <Header />;\n};\n\nexport default App;\n","import { ProductType } from '../../api/api';\nimport { PRODUCT_ACTIONS_TYPE, FetchActionsType } from '../actions/productActions';\n\nconst initialState: FetchProductsStateType = {\n  items: [],\n  loading: false,\n  error: '',\n};\n\nexport type FetchProductsStateType = {\n  items: Array<ProductType>;\n  loading: boolean;\n  error: string;\n};\n\nexport const ProductReducer = (\n  state: FetchProductsStateType = initialState,\n  action: FetchActionsType,\n): FetchProductsStateType => {\n  switch (action.type) {\n    case PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_BEGIN:\n      return {\n        ...state,\n        loading: true,\n        error: '',\n      };\n\n    case PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        items: action.payload.products,\n      };\n\n    case PRODUCT_ACTIONS_TYPE.FETCH_PRODUCTS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n        items: [],\n      };\n\n    case PRODUCT_ACTIONS_TYPE.SORT_BY_CATEGORY:\n      state.items.sort(function (a, b) {\n        let nameA = a.category.name.toUpperCase();\n        let nameB = b.category.name.toUpperCase();\n\n        if (action.payload.sortKey == 'asc') {\n          if (nameA < nameB) {\n            return -1;\n          } else if (nameA > nameB) {\n            return 1;\n          }\n        } else {\n          if (nameA < nameB) {\n            return 1;\n          } else if (nameA > nameB) {\n            return -1;\n          }\n        }\n        return 0;\n      });\n\n      return {\n        ...state,\n        loading: false,\n        items: action.payload.products,\n      };\n\n    case PRODUCT_ACTIONS_TYPE.SORT_BY_PRICE:\n      state.items.sort(function (a, b) {\n        if (action.payload.sortKey == 'asc') {\n          return a.price - b.price;\n        } else {\n          return b.price - a.price;\n        }\n        return 0;\n      });\n\n      return {\n        ...state,\n        loading: false,\n        items: action.payload.products,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { ProductType } from '../../api/api';\nimport { CART_ACTIONS_TYPE, CartActionsType } from '../actions/cartActions';\n\nconst initialState: CartStateType = {\n  cart: [],\n};\n\nexport type CartStateType = {\n  cart: Array<CartProductStateType>;\n};\n\ntype CartProductStateType = {\n  product: ProductType;\n  quantity: number;\n};\n\nexport const CartReducer = (state: CartStateType = initialState, action: CartActionsType): CartStateType => {\n  let cart = [...state.cart];\n  switch (action.type) {\n    case CART_ACTIONS_TYPE.ADD_TO_CART: {\n      let item = cart.find((item) => item.product.id == action.payload.productId);\n      if (item) {\n        action.payload.quantity = item.quantity++;\n      } else {\n        cart.push({ ...action.payload });\n      }\n\n      return {\n        ...state,\n        cart: cart,\n      };\n    }\n    case CART_ACTIONS_TYPE.REMOVE_FROM_CART: {\n      let item = cart.find((item) => item.product.id == action.payload.productId);\n\n      if (item && item.quantity > 1) {\n        item.quantity = action.payload.quantity - 1;\n      } else {\n        cart = cart.filter((item) => item.product.id != action.payload.productId);\n      }\n\n      return {\n        ...state,\n        cart: cart,\n      };\n    }\n    case CART_ACTIONS_TYPE.UPDATE_CART_QUANTITY: {\n      let item = cart.find((item) => item.product.id == action.payload.productId);\n\n      item && (item.quantity = action.payload.quantity + 1);\n\n      return {\n        ...state,\n        cart: cart,\n      };\n    }\n  }\n  return state;\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { ProductReducer } from './reducers/productReducer';\nimport thunkMiddleware from 'redux-thunk';\nimport { CartReducer } from './reducers/cartReducer';\n\nconst rootReducer = combineReducers({\n  fetch_products: ProductReducer,\n  cart: CartReducer,\n});\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableCell\":\"Products_tableCell__1vSL-\",\"table\":\"Products_table__2qprs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableCell\":\"Cart_tableCell__2HEM_\",\"table\":\"Cart_table__b5Lnm\"};"],"sourceRoot":""}